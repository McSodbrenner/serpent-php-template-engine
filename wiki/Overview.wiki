#labels Featured

= Overview =
Serpent uses PHP itself as its template language so it should be easy to work with it. But there are a few improvements compared to pure PHP which are explained on this page.

== Loading Serpent ==
Serpent is PSR-0 compatible and loadable via [http://getcomposer.org/ Composer]. Here is the Packagist URL: [https://packagist.org/packages/mcsodbrenner/serpent].
If you do not use Composer or don't have a PSR-0 compatible autoloader, just include the Autoloader.php.


== Short syntax for php tags ==
Because it is annoying to write the full php open and close tags, serpent uses the tilde (which gave it its name) to determine the start and the end of a php block.
Serpent uses the same delimiter at both sides because it is faster written than different characters or multiple characters.
Additionally it is possible to write two tildes at the beginning to express a "<?php echo".

{{{
~echo $foo~
}}}
is the same as
{{{
~~$foo~
}}} 

It is also possible to use the default php tags like "<?php", "<?" and "<?=". The short tags which will be expanded to the longer version so you can use them also on servers with "short_open_tag = 0" (php.ini).

=== Escaping the tilde ===
If you want to output a tilde you have to escape it in your template with a backslash:
{{{
Now here comes a tilde: \~.
}}}


== No additional markup language ==
You do not have to learn another markup language because all code you write in between the delimiters is pure php code.

To write a simple condition you could write that:
{{{
~if ($foo == $bar) {~ 
    ~~$foo~
~}~
}}}

For better readability I recommend the [http://www.php.net/alternative_syntax alternative syntax for control structures]:
{{{
~if ($foo == $bar):~ 
    ~~$foo~
~endif~
}}}

=== Template comments ===
The syntax for comments in a template is the same as in php. So the following template code is valid because it does not matter, if you write your comment between or outside the delimiters:
{{{
/* Now iterate an array */
~foreach ($var as $value): /* add $key to iterate the keys too */~
    ~~$value~
~endforeach~
}}}

== Dot syntax for arrays ==
If you have ever worked with Smarty you will probably like the handy dot syntax for arrays. As Smarty does Serpent allows you to mix the dot syntax and the standard php syntax in your php code.

{{{
~~$foo.bar~
~~$foo.bar[$bar.index].$foo.bar~
}}}


== Shortcuts for functions (mappings) ==
Because you are able to write pure php code it is simple to call your own template helper functions. Imagine you have a method in a static helper class that generates linked email addresses. You would call it like that:

{{{
~~templateHelperClass::mailto('foo@bar.com')~
}}}

But this is not very readable. For this reason it is possible to map functions to shortcuts. Mapped functions always start with a colon. For the example above you could define a mapping which let you call the line above that way:

{{{
~~:mailto('foo@bar.com')~
}}}


== Template inheritance ==
Template inheritance is a ingenious feature first used in the templating engine of "Django", a Python web framework.
Template inheritance allows you to build a base "skeleton" template that contains all the common elements of your site and defines blocks that child templates can override.

You probably know the old way the most template engines use. You define a master template with includes which also includes other templates and so on. But that way some day you will get into trouble when you try to integrate a feature your templates were not built for.

Think of a simple two column layout with the navigation at the left side and the content at the right side. In your master template you build the two column layout with the navigation and an include tag for the content area. Now try to include a teaser below the navigation which should only be visible on one single page. Tricky, hm?

Here is the way you would solve that with template inheritance.

*"page" template* (that is the page you render with Serpent)
{{{
~:extend('base')~

~:block('content')~
    The Content for this page.
~:endblock()~

~:block('teaser')~
    Because we defined this block the empty teaser block of the base template gets overwritten with this text. 
~:endblock()~
}}}

*"base" template*
{{{
<html>
<head>
    <title>My site</title>
</head>
<body>
    <div id="left">
        <!-- navigation -->
        ~:block('teaser')~
        ~:endblock()~
    </div>
    <div id="right">
        ~:block('content')~
        ~:endblock()~
    </div>
</body>
</html>
}}}

It is possible to extend as many levels as you want (vertical inheritance). So a template is able to extend another which also extends another and so on. 

It is also possible to add inheritance branches (horizontal branches). Think of the example before. If you have different teasers which are similar in their apperance you could also build teasers which extend a base teaser template. This inheritance branch is completely separated from the main branch. You can build as many inheritance branches as you like. 

_Keep in mind: It makes no sense to define text outside from block tags in an extending template. This text will be discarded. Can be useful to write comments in the template. Also the content of overwritten blocks will not be executed._

By the way: Serpent does not force the use of template inheritance. Simple old fashioned include tags are also possible of course.


== XSS Protection ==
For all variables in a template you have to explicitly decide if you want to use the original data or an escaped version. This way you will turn on your brain for every variable you use in your templates. If you forget to define your purpose Serpent will throw an exception.

{{{
~$dummy = '<strong>Dummy</strong>'~

// will throw an Exception
~~$dummy~

// outputs "Dummy" boldfaced.
~~:raw($dummy)~

// outputs "<strong>Dummy</strong>"
~~:escape($dummy)~
}}}

== Language handling ==
If you have two templates named "test.htm and test.de.htm", Serpent will use the second one only if you have passed "de" to the resource handler. For all other languages it will use "test.htm". This way you can write a completely different template for specific languages.


== Definable resources ==
It is possible to define other templates resources than those working with the file system. Think of a CMS where templates are stored in a database. No problem. Just write your own resource handler (it is really easy) and you are done.
For more take a look at the [Resources].


== Compiling engine for best performance ==
Serpent parses your templates and creates PHP scripts from them. When your Web page is viewed, Serpent reads from these PHP scripts instead of pulling the templates themselves, which saves the work of having to parse your templates again. And it only re-compiles your templates when you make changes to them, so you don't have to worry about manually compiling the templates.

You don't even have to know the PHP scripts are there, nor how compiling works. It just works.