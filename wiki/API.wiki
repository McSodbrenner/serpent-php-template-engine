= API =

== Class Serpent ==

This is the main class which controls the whole engine.

== Methods ==

_void_ *__construct(* _string_ *$compile_dir* = "templates_compiled/", _string_ *$charset* = 'utf-8', _boolean_ *$force_compile* = false*)*
 * $compile_dir is the path of the directory where compiled templates are located. The $compile_dir must be writeable by the web server.
 * $charset sets the charset for the used templates. Defaults to "utf-8". At the moment just used for the escape function.
 * $force_compile forces Serpent to compile templates on every invocation. This is handy for development and debugging. It should never be used in a production environment.

_void_ *pass(* _array_ *$vars )*
 Passes the variables to the template. Has to be an associative array where keys will be available as variables in the template.

_string_ *render(* _string_ *$template_descriptor* (, _array_ *$vars*, _string_ *$resource_handler_name*) *)*
 Returns the rendered string for a given template descriptor. A template descriptor is eg "file<span>:base"</span> which is identical to "base" if _$default_resource_ is set to "file". In this example "base" means that a template with the filename "base.htm" will be rendered if the suffix parameter for the file resource was not changed. 

_void_ *addResource(* _string_ *$resource_handler_name*, _obj_ \!McSodbrenner\Serpent\Resource *$resource_handler )*
 Adds an resource handler the define where template can came from.
   * $resource_handler_name defines the name you can use to address the resource handler in the template. 
   * $resource_handler defines the resource_handler which have to implement the interface \McSodbrenner\Serpent\Resource.
 Takea look here at [Resources] how to build a resource handler.

_void_ *addMappings(* _array_ *$vars )*
 Adds your mapping functions to Serpent. Has to be an associative array where the key has to be the mapping name and the value has to be of type "string" or "closure". For more take a look at [ShippedMappings]. 
